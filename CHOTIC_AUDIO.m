clc;
clear all;
close all;

%==========================================================================
%*****MESSAGE-ASCII-BINARY*****
str = 'chinmaya'
% ascii_str = double(str)
% binary_str = dec2bin(ascii_str)
% binary_str = binary_str(:)';

ascii_str = uint8(str)
binary_str = transpose(dec2bin(ascii_str,8))
% binary_str = str2num(binary_str)
binary_str = binary_str(:)';

ascii_len = length(ascii_str);
bin_len = ascii_len*8

%==============================================
%******CHAOTIC*******
%********USING BINARY LENGTH*********
r = 3.62;
x(1) = 0.7;
for n=1:bin_len-1
    x(n+1) = r*x(n)*(1-x(n));      
end
[so,in] = sort(x);                 % 'in' stores the random position generated by the equation

% ascii_data = reshape(binary_str,8,[])
ascii_data = reshape(binary_str,bin_len,1);          %col. vector of the binary
encrdata=[];
for m = 1:bin_len
    encrdata(m)= ascii_data(in(m));                 %encrdata(1) = ascii(in(1)) i.e. ascii(43)rd element
end
% DataEncr = str2num(encrdata);
DataEncr=reshape(encrdata,1,bin_len);                %here 0 is taken as 48 and 1 is taken as 49 


bin_mtx_message = transpose(dec2bin(DataEncr,8))
bin_message = bin_mtx_message(:)



%*******USING ASCII LENGTH**********
% r = 3.62;
% x(1) = 0.7;
% for n=1:ascii_len-1
%     x(n+1) = r*x(n)*(1-x(n));
% end
% [so,in] = sort(x);
% 
% ascii_data = reshape(ascii_str,ascii_len,1)
% encrdata=[];
% for m = 1:ascii_len
%     encrdata(m)=ascii_data(in(m));
% end
% DataEncr=reshape(encrdata,1,ascii_len)
% 
% bin_message = transpose(dec2bin(DataEncr, 8))
% bin_message = bin_message(:);



N = length(bin_message);
bin_num_message=str2num(bin_message)

bin_steg = reshape(bin_num_message, 8,bin_len)
%***********CHECK************
%********for binary****
% dem01 = ones(1,bin_len)*48;
% dem02 = DataEncr - dem01;
% test2 = reshape(dem02,8,ascii_len);
% binValues = [ 128 64 32 16 8 4 2 1 ];
% textbin = char(binValues*test2)



%*******for ascii********
% test1 = reshape(bin_message,8,ascii_len);
% binValues = [ 128 64 32 16 8 4 2 1 ];
% textbin = char(binValues*test1)



%==========================================================================
%*****AUDIO 2 BIN AND XORING*******;

soundFile = 'Chirp_Sound.wav';
% fid  = fopen(soundFile, 'r');
% data = fread(fid, [1, Inf], 'uint8');
% fclose(fid);
% aInfo = size(audioread(soundFile))
% %     nbits = aInfo.BitsPerSample
% 
% 
% bit = uint8(rem(floor((1 ./ [128, 64, 32, 16, 8, 4, 2, 1].') * data), 2));
% bit = bit(:);




fid1=fopen('Chirp_Sound.wav','r');

%first 40 bytes make wav header,store the header

header=fread(fid1,40,'uint8=>char'); 

%41st byte to 43rd byte,length of wav data samples 

data_size=fread(fid1,1,'uint32');

%copy the 16 bit wav data samples starting from 44th byte

[dta,count]=fread(fid1,inf,'uint16');   

%close the file only wav data samples are sufficient to hide the text 

fclose(fid1);
%**********
lsb=1;


% msg_bin=de2bi(msg_double,8)  %then convert message to binary   BINARY REPRESENTATION OF ASCII
% msg_bin = bin_mtx_message;
msg_bin = bin_steg;

[m,n]=size(msg_bin) %size of message binary           BINARY_MTX_MESSAGE
% [m,n]=size(bin_mtx_message)

msg_bin_re=reshape(msg_bin,m*n,1)  %reshape the message binary in a column vector  EQUIVALENT TO BIN_NUM_MESSAGE 
% msg_bin_re=bin_num_message

m_bin=de2bi(m,10)'

n_bin=de2bi(n,10)'

len=length(msg_bin_re)       %length of message binary 
% len=m*n

len_bin=de2bi(len,20)'       %convert the length to binary

%hide identity in first 8 wav data samples.

identity=[1 0 1 0 1 0 1 0]';

dta(1:8)=bitset(dta(1:8),lsb,identity(1:8));

%hide binary length of message from 9th to 28 th sample 

dta(9:18)=bitset(dta(9:18),lsb,m_bin(1:10));

dta(19:28)=bitset(dta(19:28),lsb,n_bin(1:10));                              

%hide the message binary starting from 29th position of wave data samples

dta(29:28+len)=bitset(dta(29:28+len),lsb,msg_bin(1:len)');

%open a new wav file in write mode

fid2=fopen('new2.wav','w');
op_file = 'new2.wav';
% op_read = audioread('new2.wav');
% sound(op_read)




% height = 8;
% width = aInfo;
% 
% % Counter for number of embedded bits
% embed_counter = 1;

% Traverse through the image
% for i = 1 : height
% 	for j = 1 : width
% 		
% 		% If more bits are remaining to embed
% 		if(embed_counter <= bin_len)
% 			
% 			% Finding the Least Significant Bit of the current pixel
% 			LSB = mod(double(input(i, j)), 2);
% 			
% 			% Find whether the bit is same or needs to change
% 			temp = double(xor(LSB, bin_num_message(embed_counter)));
% 			
% 			% Updating the output to input + temp
% 			output(i, j) = input(i, j)+temp;
% 			
% 			% Increment the embed counter
% 			embed_counter = embed_counter+1;
% 		end
% 		
% 	end
% end

%==========================================================================
%******DECRYPT CHAOTIC**********

binValues = [ 128 64 32 16 8 4 2 1 ];


%**********DECRYPT FOR BINARY***********

% op_data = reshape(bin_num_message,8, ascii_len)
op_data = reshape(bin_num_message,8, bin_len)
dec_data = (binValues*op_data);
dem11 = ones(1,bin_len)*48;
dem12 =  dec_data - dem11                      %since 0 is 48 and 1 is 49 we must 
% res = repmat(binValues,1,size(op_data,bin_len))

%do an operation to convert 8by64 matrix into a col. matrix only then we
%will be able to find out the positions of the bits.

% decr_data=[];
% for m = 1:bin_len
%    decr_data(in(m))=op_data(m);
% end
decr_data=[];
for m = 1:bin_len
   decr_data(in(m))=dem12(m);
end
Data_decr = reshape(decr_data,1, bin_len);

bindata = reshape(Data_decr,8,ascii_len)
ascii_recv = char(binValues*bindata)




%  *after converting to ascii
%  data = char(ascii_converted)


 




%*******DECRYPT FOR ASCII**********
% op_data = reshape(bin_num_message,8, ascii_len)
% textString = char(binValues*op_data);
%  
% disp(textString);
% 
% ascii_decr = uint8(textString)
% 
% decrdata=[];
% for m = 1:ascii_len
%     decrdata(in(m))=ascii_decr(m);
% end
% DataDecr=reshape(decrdata,1,ascii_len);
% Data = char(DataDecr)
